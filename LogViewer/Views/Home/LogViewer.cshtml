@model LogViewerViewModel
@{
    ViewData["Title"] = "Log Viewer";
}

@section Styles {
    <link rel="stylesheet" href="~/css/logviewer.css" asp-append-version="true" />
}

<div class="row" id="logViewerContainer">
    <div class="col-md-2">
        <div class="card mb-3">
            <div class="card-header">
                <h5 class="mb-0">Log Folders</h5>
            </div>
            <div class="list-group list-group-flush">
                @foreach (var folder in Model.LogFolders)
                {
                    <a asp-action="LogViewer" asp-route-folder="@folder.Path"
                       class="list-group-item list-group-item-action @(Model.FilterOptions.LogFolder == folder.Path ? "active" : "")">
                        @folder.Name
                    </a>
                }
            </div>
        </div>

        @if (Model.AvailableLogFiles.Any())
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0">Log Files</h5>
                </div>
                <div class="list-group list-group-flush" style="max-height: 300px; overflow-y: auto;">
                    @foreach (var fileInfo in Model.AvailableLogFiles)
                    {
                        <a asp-action="LogViewer" asp-route-folder="@Model.FilterOptions.LogFolder" asp-route-file="@fileInfo.FileName"
                           class="list-group-item list-group-item-action @(Model.SelectedLogFile == fileInfo.FileName ? "active" : "")">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>@fileInfo.FileName</span>
                                <small class="text-muted">
                                    @FormatFileSize(fileInfo.FileSizeBytes)
                                </small>
                            </div>
                            <div class="small text-muted">
                                Modified: @fileInfo.ModificationDate.ToString("yyyy-MM-dd HH:mm:ss")
                            </div>
                        </a>
                    }
                </div>
            </div>
        }

        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Filters</h5>
            </div>
            <div class="card-body">
                <form id="filterForm" onsubmit="return applyFilters(event)">
                    <input type="hidden" id="folder" name="folder" value="@Model.FilterOptions.LogFolder" />
                    <input type="hidden" id="file" name="file" value="@Model.SelectedLogFile" />

                    <div class="mb-3">
                        <label class="form-label">Sort Direction</label>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="radio" id="sort-desc" name="SortDirection" value="Descending" 
                                  @(Model.FilterOptions.SortDirection == SortDirection.Descending ? "checked" : "") />
                            <label class="form-check-label" for="sort-desc">Newest First</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="radio" id="sort-asc" name="SortDirection" value="Ascending" 
                                  @(Model.FilterOptions.SortDirection == SortDirection.Ascending ? "checked" : "") />
                            <label class="form-check-label" for="sort-asc">Oldest First</label>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Log Levels</label>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-trace" name="Levels" value="TRACE" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.TRACE) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-trace">TRACE</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-debug" name="Levels" value="DEBUG" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.DEBUG) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-debug">DEBUG</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-info" name="Levels" value="INF" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.INF) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-info">INFO</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-warn" name="Levels" value="WRN" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.WRN) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-warn">WARNING</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-error" name="Levels" value="ERR" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.ERR) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-error">ERROR</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-fatal" name="Levels" value="FATAL" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.FATAL) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-fatal">FATAL</label>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label" for="search-text">Search Text</label>
                        <input type="text" id="search-text" name="SearchText" class="form-control filter-input" 
                               value="@Model.FilterOptions.SearchText" placeholder="Search logs..." />
                        <div class="form-text">
                            Supports Elasticsearch-like syntax:<br/>
                            • Multiple terms: term1 term2<br/>
                            • Exact phrase: "exact phrase"<br/>
                            • Exclude term: -term
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Exclusion Filters</label>
                        <div class="accordion" id="exclusionAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#exclusionFilters">
                                        <i class="fas fa-filter text-danger me-2"></i> Configure Exclusion Filters
                                    </button>
                                </h2>
                                <div id="exclusionFilters" class="accordion-collapse collapse" data-bs-parent="#exclusionAccordion">
                                    <div class="accordion-body">
                                        <div class="mb-3">
                                            <label class="form-label" for="exclusion-text">Exclude Text</label>
                                            <input type="text" id="exclusion-text" name="ExclusionText" class="form-control filter-input" 
                                                   value="@Model.FilterOptions.ExclusionText" placeholder="Text to exclude..." />
                                            <div class="form-text">
                                                Logs containing this text will be excluded
                                            </div>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label class="form-label">Exclude Log Levels</label>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-trace" name="ExcludedLevels" value="TRACE" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.TRACE) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-trace">TRACE</label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-debug" name="ExcludedLevels" value="DEBUG" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.DEBUG) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-debug">DEBUG</label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-info" name="ExcludedLevels" value="INF" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.INF) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-info">INFO</label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-warn" name="ExcludedLevels" value="WRN" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.WRN) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-warn">WARNING</label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-error" name="ExcludedLevels" value="ERR" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.ERR) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-error">ERROR</label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-fatal" name="ExcludedLevels" value="FATAL" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.FATAL) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-fatal">FATAL</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label class="form-label">Date and Time Range</label>
                        <div class="row mb-2">
                            <div class="col-12 mb-2">
                                <label class="form-label small">From</label>
                                <div class="row">
                                    <div class="col-7">
                                        <input type="date" id="start-date" name="StartDate" class="form-control filter-input" 
                                               value="@(Model.FilterOptions.StartDate?.ToString("yyyy-MM-dd"))" />
                                    </div>
                                    <div class="col-5">
                                        <input type="time" id="start-time" name="StartTime" class="form-control filter-input" 
                                               value="@(Model.FilterOptions.StartTime?.ToString(@"hh\:mm"))" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <label class="form-label small">To</label>
                                <div class="row">
                                    <div class="col-7">
                                        <input type="date" id="end-date" name="EndDate" class="form-control filter-input" 
                                               value="@(Model.FilterOptions.EndDate?.ToString("yyyy-MM-dd"))" />
                                    </div>
                                    <div class="col-5">
                                        <input type="time" id="end-time" name="EndTime" class="form-control filter-input" 
                                               value="@(Model.FilterOptions.EndTime?.ToString(@"hh\:mm"))" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-text">
                            Filter logs by date and time. If no time is specified, the entire day is included.
                        </div>
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Apply Filters</button>
                        <button type="button" class="btn btn-outline-secondary" onclick="resetFilters()">Reset Filters</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="col-md-10">
        <div class="card" style="height: calc(100vh - 90px); display: flex; flex-direction: column;">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    @if (!string.IsNullOrEmpty(Model.SelectedLogFile))
                    {
                        <span>@Model.SelectedLogFile</span>
                        
                        @if (Model.AvailableLogFiles.Any(f => f.FileName == Model.SelectedLogFile))
                        {
                            var selectedFileInfo = Model.AvailableLogFiles.First(f => f.FileName == Model.SelectedLogFile);
                            <small class="text-muted ms-2">
                                Modified: @selectedFileInfo.ModificationDate.ToString("yyyy-MM-dd HH:mm:ss")
                                | Size: @FormatFileSize(selectedFileInfo.FileSizeBytes)
                            </small>
                        }
                    }
                    else
                    {
                        <span>No log file selected</span>
                    }
                </h5>
                <div>
                    <span class="badge bg-secondary">Displayed: <span id="displayed-count">@Model.DisplayedCount</span> of <span id="total-count">@Model.TotalCount</span> logs</span>
                    <span class="badge bg-info">Filter Sort: <span id="sort-direction-display">@(Model.FilterOptions.SortDirection == SortDirection.Ascending ? "Oldest First" : "Newest First")</span></span>
                </div>
            </div>
            <div class="card-body p-0" style="flex-grow: 1; overflow-y: auto;">
                @if (Model.Logs.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover table-striped mb-0" id="logs-table">
                            <thead class="sticky-top" style="z-index: 1;">
                                <tr>
                                    <th>
                                        <a href="#" class="text-dark text-decoration-none d-flex align-items-center" 
                                           onclick="sortTable('timestamp', event)">
                                            Time
                                            <span class="ms-1 sort-indicator" data-field="timestamp">
                                                @(Model.FilterOptions.TableSortDirection == SortDirection.Ascending ? "▲" : "▼")
                                            </span>
                                        </a>
                                    </th>
                                    <th>
                                        <a href="#" class="text-dark text-decoration-none d-flex align-items-center"
                                           onclick="sortTable('level', event)">
                                            Level
                                            <span class="ms-1 sort-indicator" data-field="level" style="display:none;">▼</span>
                                        </a>
                                    </th>
                                    <th>
                                        <a href="#" class="text-dark text-decoration-none"
                                           onclick="sortTable('message', event)">
                                            Message
                                            <span class="ms-1 sort-indicator" data-field="message" style="display:none;">▼</span>
                                        </a>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var log in Model.Logs)
                                {
                                    <tr class="@GetLogRowClass(log.Level)" 
                                        data-level="@log.Level" 
                                        data-message="@log.Message"
                                        data-date="@log.Timestamp.ToString("yyyy-MM-dd")"
                                        data-time="@log.Timestamp.ToString("HH:mm:ss")"
                                        data-position="@Model.Logs.IndexOf(log)">
                                        <td class="text-nowrap">@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                        <td class="text-nowrap">@log.Level</td>
                                        <td>@log.Message</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="p-4 text-center">
                        <p class="mb-0">No log entries found</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/logviewer.js" asp-append-version="true"></script>
    <script>
        // Set the initial sort direction from the server model
        setInitialSortDirection("@(Model.FilterOptions.TableSortDirection.ToString().ToLower())");
    </script>
}

@functions {
    private string GetLogRowClass(LogLevel level)
    {
        return level switch
        {
            LogLevel.ERR or LogLevel.FATAL => "table-danger",
            LogLevel.WRN => "table-warning",
            LogLevel.INF => "text-info",
            LogLevel.DEBUG => "text-light",
            LogLevel.TRACE => "text-secondary",
            _ => "text-light"
        };
    }
    
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1) {
            order++;
            len = len/1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
} 