@model LogViewerViewModel
@{
    ViewData["Title"] = "Log Viewer";
}

<div class="mb-4">
    <h1>Log Viewer</h1>
    <p>View and analyze server logs with advanced filtering</p>
</div>

<div class="row">
    <div class="col-md-3">
        <div class="card mb-3">
            <div class="card-header">
                <h5 class="mb-0">Log Folders</h5>
            </div>
            <div class="list-group list-group-flush">
                @foreach (var folder in Model.LogFolders)
                {
                    <a asp-action="LogViewer" asp-route-folder="@folder.Path"
                       class="list-group-item list-group-item-action @(Model.FilterOptions.LogFolder == folder.Path ? "active" : "")">
                        @folder.Name
                    </a>
                }
            </div>
        </div>

        @if (Model.AvailableLogFiles.Any())
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0">Log Files</h5>
                </div>
                <div class="list-group list-group-flush" style="max-height: 300px; overflow-y: auto;">
                    @foreach (var fileInfo in Model.AvailableLogFiles)
                    {
                        <a asp-action="LogViewer" asp-route-folder="@Model.FilterOptions.LogFolder" asp-route-file="@fileInfo.FileName"
                           class="list-group-item list-group-item-action @(Model.SelectedLogFile == fileInfo.FileName ? "active" : "")">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>@fileInfo.FileName</span>
                                <small class="text-muted">
                                    @FormatFileSize(fileInfo.FileSizeBytes)
                                </small>
                            </div>
                            <div class="small text-muted">
                                Modified: @fileInfo.ModificationDate.ToString("yyyy-MM-dd HH:mm:ss")
                            </div>
                        </a>
                    }
                </div>
            </div>
        }

        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Filters</h5>
            </div>
            <div class="card-body">
                <form id="filterForm" onsubmit="return applyFilters(event)">
                    <input type="hidden" id="folder" name="folder" value="@Model.FilterOptions.LogFolder" />
                    <input type="hidden" id="file" name="file" value="@Model.SelectedLogFile" />

                    <div class="mb-3">
                        <label class="form-label">Sort Direction</label>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="radio" id="sort-desc" name="SortDirection" value="Descending" 
                                  @(Model.FilterOptions.SortDirection == SortDirection.Descending ? "checked" : "") />
                            <label class="form-check-label" for="sort-desc">Newest First</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="radio" id="sort-asc" name="SortDirection" value="Ascending" 
                                  @(Model.FilterOptions.SortDirection == SortDirection.Ascending ? "checked" : "") />
                            <label class="form-check-label" for="sort-asc">Oldest First</label>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Log Levels</label>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-trace" name="Levels" value="TRACE" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.TRACE) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-trace">TRACE</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-debug" name="Levels" value="DEBUG" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.DEBUG) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-debug">DEBUG</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-info" name="Levels" value="INF" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.INF) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-info">INFO</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-warn" name="Levels" value="WRN" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.WRN) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-warn">WARNING</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-error" name="Levels" value="ERR" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.ERR) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-error">ERROR</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input filter-input" type="checkbox" id="chk-fatal" name="Levels" value="FATAL" 
                                  @(Model.FilterOptions.Levels?.Contains(LogLevel.FATAL) == true ? "checked" : "") />
                            <label class="form-check-label" for="chk-fatal">FATAL</label>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label" for="search-text">Search Text</label>
                        <input type="text" id="search-text" name="SearchText" class="form-control filter-input" 
                               value="@Model.FilterOptions.SearchText" placeholder="Search logs..." />
                        <div class="form-text">
                            Supports Elasticsearch-like syntax:<br/>
                            • Multiple terms: term1 term2<br/>
                            • Exact phrase: "exact phrase"<br/>
                            • Exclude term: -term
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Exclusion Filters</label>
                        <div class="accordion" id="exclusionAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#exclusionFilters">
                                        <i class="fas fa-filter text-danger me-2"></i> Configure Exclusion Filters
                                    </button>
                                </h2>
                                <div id="exclusionFilters" class="accordion-collapse collapse" data-bs-parent="#exclusionAccordion">
                                    <div class="accordion-body">
                                        <div class="mb-3">
                                            <label class="form-label" for="exclusion-text">Exclude Text</label>
                                            <input type="text" id="exclusion-text" name="ExclusionText" class="form-control filter-input" 
                                                   value="@Model.FilterOptions.ExclusionText" placeholder="Text to exclude..." />
                                            <div class="form-text">
                                                Logs containing this text will be excluded
                                            </div>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label class="form-label">Exclude Log Levels</label>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-trace" name="ExcludedLevels" value="TRACE" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.TRACE) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-trace">TRACE</label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-debug" name="ExcludedLevels" value="DEBUG" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.DEBUG) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-debug">DEBUG</label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-info" name="ExcludedLevels" value="INF" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.INF) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-info">INFO</label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-warn" name="ExcludedLevels" value="WRN" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.WRN) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-warn">WARNING</label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-error" name="ExcludedLevels" value="ERR" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.ERR) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-error">ERROR</label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input filter-input" type="checkbox" id="exclude-fatal" name="ExcludedLevels" value="FATAL" 
                                                      @(Model.FilterOptions.ExcludedLevels?.Contains(LogLevel.FATAL) == true ? "checked" : "") />
                                                <label class="form-check-label" for="exclude-fatal">FATAL</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label class="form-label">Date and Time Range</label>
                        <div class="row mb-2">
                            <div class="col-12 mb-2">
                                <label class="form-label small">From</label>
                                <div class="row">
                                    <div class="col-7">
                                        <input type="date" id="start-date" name="StartDate" class="form-control filter-input" 
                                               value="@(Model.FilterOptions.StartDate?.ToString("yyyy-MM-dd"))" />
                                    </div>
                                    <div class="col-5">
                                        <input type="time" id="start-time" name="StartTime" class="form-control filter-input" 
                                               value="@(Model.FilterOptions.StartTime?.ToString(@"hh\:mm"))" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <label class="form-label small">To</label>
                                <div class="row">
                                    <div class="col-7">
                                        <input type="date" id="end-date" name="EndDate" class="form-control filter-input" 
                                               value="@(Model.FilterOptions.EndDate?.ToString("yyyy-MM-dd"))" />
                                    </div>
                                    <div class="col-5">
                                        <input type="time" id="end-time" name="EndTime" class="form-control filter-input" 
                                               value="@(Model.FilterOptions.EndTime?.ToString(@"hh\:mm"))" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-text">
                            Filter logs by date and time. If no time is specified, the entire day is included.
                        </div>
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Apply Filters</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="col-md-9">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    @if (!string.IsNullOrEmpty(Model.SelectedLogFile))
                    {
                        <span>@Model.SelectedLogFile</span>
                        
                        @if (Model.AvailableLogFiles.Any(f => f.FileName == Model.SelectedLogFile))
                        {
                            var selectedFileInfo = Model.AvailableLogFiles.First(f => f.FileName == Model.SelectedLogFile);
                            <small class="text-muted ms-2">
                                Modified: @selectedFileInfo.ModificationDate.ToString("yyyy-MM-dd HH:mm:ss")
                                | Size: @FormatFileSize(selectedFileInfo.FileSizeBytes)
                            </small>
                        }
                    }
                    else
                    {
                        <span>No log file selected</span>
                    }
                </h5>
                <div>
                    <span class="badge bg-secondary">Displayed: <span id="displayed-count">@Model.DisplayedCount</span> of <span id="total-count">@Model.TotalCount</span> logs</span>
                    <span class="badge bg-info">Filter Sort: <span id="sort-direction-display">@(Model.FilterOptions.SortDirection == SortDirection.Ascending ? "Oldest First" : "Newest First")</span></span>
                </div>
            </div>
            <div class="card-body p-0">
                @if (Model.Logs.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover table-striped mb-0" id="logs-table">
                            <thead>
                                <tr>
                                    <th>
                                        <a href="#" class="text-dark text-decoration-none d-flex align-items-center" 
                                           onclick="sortTable('timestamp', event)">
                                            Time
                                            <span class="ms-1 sort-indicator" data-field="timestamp">
                                                @(Model.FilterOptions.TableSortDirection == SortDirection.Ascending ? "▲" : "▼")
                                            </span>
                                        </a>
                                    </th>
                                    <th>
                                        <a href="#" class="text-dark text-decoration-none d-flex align-items-center"
                                           onclick="sortTable('level', event)">
                                            Level
                                            <span class="ms-1 sort-indicator" data-field="level" style="display:none;">▼</span>
                                        </a>
                                    </th>
                                    <th>
                                        <a href="#" class="text-dark text-decoration-none"
                                           onclick="sortTable('message', event)">
                                            Message
                                            <span class="ms-1 sort-indicator" data-field="message" style="display:none;">▼</span>
                                        </a>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var log in Model.Logs)
                                {
                                    <tr class="@GetLogRowClass(log.Level)" 
                                        data-timestamp="@log.Timestamp.Ticks" 
                                        data-level="@log.Level" 
                                        data-message="@log.Message"
                                        data-date="@log.Timestamp.ToString("yyyy-MM-dd")"
                                        data-time="@log.Timestamp.ToString("HH:mm:ss")">
                                        <td class="text-nowrap">@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                        <td class="text-nowrap">@log.Level</td>
                                        <td>@log.Message</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="p-4 text-center">
                        <p class="mb-0">No log entries found</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Store all log rows for filtering
        let allLogRows = [];
        let currentSortField = "timestamp";
        let currentSortDirection = "@(Model.FilterOptions.TableSortDirection.ToString().ToLower())";
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Capture all log rows
            const table = document.getElementById('logs-table');
            if (table) {
                allLogRows = Array.from(table.querySelector('tbody').rows);
                
                // Load saved filters from localStorage
                loadSavedFilters();
                
                // Set up event listeners for instant filtering
                document.querySelectorAll('.filter-input').forEach(input => {
                    input.addEventListener('change', function() {
                        applyFilters();
                        saveFilters();
                    });
                });
                
                // Set up text search with debounce
                const searchInput = document.getElementById('search-text');
                if (searchInput) {
                    let timeout = null;
                    searchInput.addEventListener('input', function() {
                        clearTimeout(timeout);
                        timeout = setTimeout(function() {
                            applyFilters();
                            saveFilters();
                        }, 300);
                    });
                }
                
                // Show active sort indicator
                updateSortIndicators();
            }
        });

        function saveFilters() {
            const filters = {
                searchText: document.getElementById('search-text').value,
                exclusionText: document.getElementById('exclusion-text')?.value || '',
                startDate: document.getElementById('start-date').value,
                startTime: document.getElementById('start-time').value,
                endDate: document.getElementById('end-date').value,
                endTime: document.getElementById('end-time').value,
                sortDirection: document.querySelector('input[name="SortDirection"]:checked')?.value || 'Descending',
                levels: Array.from(document.querySelectorAll('input[name="Levels"]:checked')).map(cb => cb.value),
                excludedLevels: Array.from(document.querySelectorAll('input[name="ExcludedLevels"]:checked')).map(cb => cb.value),
                currentSortField: currentSortField,
                currentSortDirection: currentSortDirection
            };
            
            localStorage.setItem('logViewerFilters', JSON.stringify(filters));
        }

        function loadSavedFilters() {
            const savedFilters = localStorage.getItem('logViewerFilters');
            if (savedFilters) {
                const filters = JSON.parse(savedFilters);
                
                // Restore text inputs
                document.getElementById('search-text').value = filters.searchText || '';
                if (document.getElementById('exclusion-text')) {
                    document.getElementById('exclusion-text').value = filters.exclusionText || '';
                }
                document.getElementById('start-date').value = filters.startDate || '';
                document.getElementById('start-time').value = filters.startTime || '';
                document.getElementById('end-date').value = filters.endDate || '';
                document.getElementById('end-time').value = filters.endTime || '';
                
                // Restore sort direction
                const sortRadio = document.querySelector(`input[name="SortDirection"][value="${filters.sortDirection}"]`);
                if (sortRadio) sortRadio.checked = true;
                
                // Restore level checkboxes
                document.querySelectorAll('input[name="Levels"]').forEach(cb => {
                    cb.checked = filters.levels?.includes(cb.value) || false;
                });
                
                document.querySelectorAll('input[name="ExcludedLevels"]').forEach(cb => {
                    cb.checked = filters.excludedLevels?.includes(cb.value) || false;
                });
                
                // Restore table sorting
                currentSortField = filters.currentSortField || 'timestamp';
                currentSortDirection = filters.currentSortDirection || 'descending';
                
                // Apply the loaded filters
                applyFilters();
            }
        }
        
        function updateSortIndicators() {
            // Hide all indicators
            document.querySelectorAll('.sort-indicator').forEach(indicator => {
                indicator.style.display = 'none';
            });
            
            // Show current indicator
            const activeIndicator = document.querySelector(`.sort-indicator[data-field="${currentSortField}"]`);
            if (activeIndicator) {
                activeIndicator.style.display = 'inline';
                activeIndicator.textContent = currentSortDirection === 'ascending' ? '▲' : '▼';
            }
        }
        
        function sortTable(field, event) {
            if (event) {
                event.preventDefault();
            }
            
            // Toggle direction if same field
            if (field === currentSortField) {
                currentSortDirection = currentSortDirection === 'ascending' ? 'descending' : 'ascending';
            } else {
                currentSortField = field;
                currentSortDirection = 'descending'; // Default to descending for new field
            }
            
            // Update indicators
            updateSortIndicators();
            
            // Apply the sort
            applyFilters();
            saveFilters();
        }
        
        function applyFilters(event) {
            if (event) {
                event.preventDefault();
            }
            
            // Get filter values
            const levels = Array.from(document.querySelectorAll('input[name="Levels"]:checked'))
                .map(checkbox => checkbox.value);
            const excludedLevels = Array.from(document.querySelectorAll('input[name="ExcludedLevels"]:checked'))
                .map(checkbox => checkbox.value);
            const searchText = document.getElementById('search-text').value.toLowerCase();
            const exclusionText = document.getElementById('exclusion-text')?.value.toLowerCase() || '';
            const startDate = document.getElementById('start-date').value;
            const startTime = document.getElementById('start-time').value;
            const endDate = document.getElementById('end-date').value;
            const endTime = document.getElementById('end-time').value;
            
            // Create date objects for comparison
            let startDateTime = null;
            let endDateTime = null;
            
            if (startDate) {
                startDateTime = new Date(startDate);
                if (startTime) {
                    const [hours, minutes] = startTime.split(':');
                    startDateTime.setHours(parseInt(hours || 0), parseInt(minutes || 0), 0);
                } else {
                    startDateTime.setHours(0, 0, 0);
                }
            }
            
            if (endDate) {
                endDateTime = new Date(endDate);
                if (endTime) {
                    const [hours, minutes] = endTime.split(':');
                    endDateTime.setHours(parseInt(hours || 0), parseInt(minutes || 0), 59);
                } else {
                    endDateTime.setHours(23, 59, 59);
                }
            }
            
            // Parse search terms
            const searchTerms = parseSearchTerms(searchText);
            const exclusionTerms = parseSearchTerms(exclusionText);
            
            // Filter rows
            let filteredRows = allLogRows.filter(row => {
                // Level filter
                if (levels.length > 0 && !levels.includes(row.getAttribute('data-level'))) {
                    return false;
                }
                
                // Exclusion level filter
                if (excludedLevels.length > 0 && excludedLevels.includes(row.getAttribute('data-level'))) {
                    return false;
                }
                
                // Date/time filter
                if (startDateTime || endDateTime) {
                    const rowDate = row.getAttribute('data-date');
                    const rowTime = row.getAttribute('data-time');
                    const rowDateTime = new Date(`${rowDate}T${rowTime}`);
                    
                    if (startDateTime && rowDateTime < startDateTime) {
                        return false;
                    }
                    
                    if (endDateTime && rowDateTime > endDateTime) {
                        return false;
                    }
                }
                
                // Text search
                if (searchText) {
                    const rowText = row.textContent.toLowerCase();
                    
                    // Check negative terms first (exclude)
                    if (searchTerms.negative.some(term => rowText.includes(term))) {
                        return false;
                    }
                    
                    // Check quoted phrases (all must match)
                    if (searchTerms.quoted.length > 0 && 
                        !searchTerms.quoted.every(term => rowText.includes(term))) {
                        return false;
                    }
                    
                    // Check positive terms (at least one must match if any exist)
                    if (searchTerms.positive.length > 0 && 
                        !searchTerms.positive.some(term => rowText.includes(term))) {
                        return false;
                    }
                }
                
                // Exclusion text filter
                if (exclusionText) {
                    const rowText = row.textContent.toLowerCase();
                    
                    // If any positive exclusion term matches, exclude this row
                    if (exclusionTerms.positive.some(term => rowText.includes(term))) {
                        return false;
                    }
                    
                    // If any quoted exclusion phrase matches, exclude this row
                    if (exclusionTerms.quoted.some(term => rowText.includes(term))) {
                        return false;
                    }
                }
                
                return true;
            });
            
            // Sort filtered rows
            filteredRows = sortRows(filteredRows);
            
            // Update the table
            updateTable(filteredRows);
            
            // Update counts
            document.getElementById('displayed-count').textContent = filteredRows.length;
            document.getElementById('total-count').textContent = allLogRows.length;
            
            return false;
        }
        
        function parseSearchTerms(query) {
            const result = {
                quoted: [],
                positive: [],
                negative: []
            };
            
            if (!query) return result;
            
            // Extract quoted phrases
            const quoteRegex = /"([^"]+)"/g;
            let match;
            let processedQuery = query;
            
            while ((match = quoteRegex.exec(query)) !== null) {
                result.quoted.push(match[1].toLowerCase());
                // Remove the quoted text from the query
                processedQuery = processedQuery.replace(match[0], ' ');
            }
            
            // Process remaining terms
            const terms = processedQuery.split(/\s+/).filter(t => t);
            
            terms.forEach(term => {
                if (term.startsWith('-') && term.length > 1) {
                    result.negative.push(term.substring(1).toLowerCase());
                } else {
                    result.positive.push(term.toLowerCase());
                }
            });
            
            return result;
        }
        
        function sortRows(rows) {
            return rows.sort((a, b) => {
                let aValue = a.getAttribute(`data-${currentSortField}`);
                let bValue = b.getAttribute(`data-${currentSortField}`);
                
                // Convert to appropriate types for comparison
                if (currentSortField === 'timestamp') {
                    aValue = BigInt(aValue);
                    bValue = BigInt(bValue);
                }
                
                // Compare values
                let result = 0;
                if (aValue < bValue) {
                    result = -1;
                } else if (aValue > bValue) {
                    result = 1;
                }
                
                // Apply sort direction
                return currentSortDirection === 'ascending' ? result : -result;
            });
        }
        
        function updateTable(rows) {
            const tableBody = document.querySelector('#logs-table tbody');
            
            // Clear current rows
            tableBody.innerHTML = '';
            
            // Add filtered rows
            rows.forEach(row => {
                tableBody.appendChild(row.cloneNode(true));
            });
            
            // Show 'no records' message if needed
            if (rows.length === 0) {
                const emptyRow = document.createElement('tr');
                const emptyCell = document.createElement('td');
                emptyCell.colSpan = 3;
                emptyCell.textContent = 'No matching logs found';
                emptyCell.className = 'text-center p-3';
                emptyRow.appendChild(emptyCell);
                tableBody.appendChild(emptyRow);
            }
        }
    </script>
}

@functions {
    private string GetLogRowClass(LogLevel level)
    {
        return level switch
        {
            LogLevel.ERR or LogLevel.FATAL => "table-danger",
            LogLevel.WRN => "table-warning",
            LogLevel.INF => "table-info",
            LogLevel.DEBUG => "table-light",
            LogLevel.TRACE => "table-secondary",
            _ => ""
        };
    }
    
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1) {
            order++;
            len = len/1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
} 